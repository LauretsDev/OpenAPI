openapi: 3.0.2
info:
  version: '1.0'
  title: OpenAPI Course
  description: Specification for OpenAPI Course
  termsOfService: https://example.com/terms
  contact:
    name: Diego Laurentino
    email: diego@email.com
    url: https://github.com/LauretsDev
  license:
    url: https://www.apache.org/licenses/LICENSE-2.0
    name: Apache 2.0
servers: 
  - url: https://dev.example.com
    description: Development Server
  - url: https://qa.example.com 
    description: QA
  - url: https://prod.example.com 
    description: Production
paths: 
  "/v1/customers":
    get:
      summary: List of customers
      description: Get a list of all customers
      tags: 
        - Customer
      operationId: getAllCustomersV1
      responses:
        "200":
          description: List of customers
          content:
            application/json:
              schema:
                type: array
                minItems: 1
                maxItems: 100
                items:
                  $ref: "#/components/schemas/Customer"
                  
    post:
      summary: Create a customer
      description: Create a new customer
      tags:
        - Customer
      operationId: createNewCustomerV1
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              $ref: "#/components/schemas/Customer"
      responses:
        "201":
          description: Customer created
          headers:
            Location:
              description: New customer location
              schema:
                type: string
                format: uri
                example: "/v1/customers/{newId}"
        "400":
          description: Bad Request
        "409":
          description: Conflict
                  
  "/v1/customers/{customerId}":
    get:
      summary: Get a customer
      description: Get a **single** customer in the system
      tags: 
        - Customer
      operationId: getCustomerByIdV1
      parameters:
        - $ref: "#/components/parameters/CustomerId"
      responses:
        "200":
          description: Found Customer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
        "404":
          description: Not Found
    put:
      summary: Update a customer
      description: Update an existing customer
      tags: 
        - Customer
      operationId: updateCustomerByIdV1
      parameters: 
        - $ref: "#/components/parameters/CustomerId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Customer"
      responses:
        "204":
          description: Customer updated
    delete:
      summary: Delete a customer
      description: Delete a customer by Id
      tags: 
        - Customer
      operationId: deleteCustomerByIdV1
      parameters:
        - $ref: "#/components/parameters/CustomerId"
      responses:
        "200":
          description: Deleted Customer
                
  "/v1/beers":
    get:
      tags: 
        - Beer
      operationId: getAllBeersV1
      responses:
        "200":
          description: List of beers
          content:
            application/json:
              schema:
                type: array
                minItems: 1
                maxItems: 100
                items:
                  $ref: "#/components/schemas/Beer"
        "404":
          description: Not Found

security: 
  - BasicAuth: []
  - JwtAuthToken: []
components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    JwtAuthToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Address:
      type: object
      properties:
        line1:
          type: string
        city:
          type: string
        stateCode:
          type: string
          minLength: 2
          maxLength: 2
          #enum: [MA,NY,CA,TX]
          enum: 
            - MA
            - NY
            - CA
            - TX
        zip:
          type: string
    Customer:
      type: object
      description: Customer Object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        firstName:
          type: string
          minLength: 2
          maxLength: 16
          example: Diego
        lastName:
          type: string
          minLength: 2
          maxLength: 16
          example: Laurentino
        address:
          $ref: "#/components/schemas/Address"
    Beer:
      type: object
      description: Beer Object
      properties:
        name:
          type: string
        style:
          type: string
          enum: [ALE, PALE_ALE, IPA, WHEAT, LAGER]
        upc:
          type: string
        price:
          type: number
          format: float
          example: 12.99
        quantityOnHand:
          type: integer
          format: int32
          example: 80
        brewery:
          $ref: "#/components/schemas/Brewery"
          
    Brewery:
      type: object
      description: Brewery Object
      properties:
        name:
          type: string
        location:
          type: string
  parameters:
    CustomerId:
      name: customerId
      in: path
      description: Customer ID
      required: true
      schema:
        type: string
        format: uuid
